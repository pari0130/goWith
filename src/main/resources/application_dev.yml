# dev 환경  postgres
---
spring:
  profiles: dev # 기본 환경 선택
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://ec2-54-83-201-84.compute-1.amazonaws.com/d5hbm2j17kdsgt
    username: cxxglhqyxmmmrx
    password: 64f81c6a11445a07c2f3fcb44dc33f764e1b41e97057343e9138666801fe580e
    # data: classpath:data-h2.sql # 시작할때 실행시킬 script
    # hikari.connectionTimeout: 20000
    # hikari.maximumPoolSize: 5
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: validate # Hibernate ddl auto (create, create-drop, validate, update)
#  base:
#    url: TODO

logging:
  # file: logs/application-debug.log
  pattern:
    console: "%d %-5level %logger : %msg%n"
    # file: "%d %-5level [%thread] %logger : %msg%n"
  level:
    org.springframework.web: ERROR
    com.howtodoinjava: INFO
    org.hibernate: ERROR

    # create
    # - Session factory가 실행될 때에 스키마를 지우고 다시 생성합니다. 스키마를 생성한 다음에 classpath에서 import.sql 파일이 있는지 찾아 이 파일에 등록된 쿼리문을 실행합니다.
    # create-drop
    # - create와 같지만 session factory가 내려갈 때 DB의 스키마를 삭제합니다.
    # update
    # - 시작하면서 도메인 객체 구성과 DB의 스키마를 비교해 필요한 테이블이나 칼럼이 없을 때 도메인 객체에 맞춰 DB 스키마를 변경합니다. 데이터나 스키마를 지우지는 않습니다.
    # validate
    # - 처음에 도메인 객체 구성과 DB 스키마가 같은지 확인만 할 뿐 DB 스키마에 전혀 손대지 않습니다. SessionFactory 시작 시 확인을 해서 문제가 있으면 예외를 토해내고 죽습니다.